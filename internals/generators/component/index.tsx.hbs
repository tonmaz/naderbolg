/**
* {{ properCase ComponentName }}
*/
{{#if wantMemo}}
import React, { memo } from 'react';
{{/if}}
{{#if wantReactComponent}}
import React from 'react';
{{/if}}
{{#if wantCssmodules}}
    import s from './{{ properCase ComponentName }}.module.css';
{{/if}}
{{#if wantStyledComponents}}
import tw, { styled, css, theme } from 'twin.macro';


{{/if}}
{{#if wantReactComponent}}
{{#if wantTranslations}}
    import common from "@src/common/lib/translations/common_en.json";
    import { loadTranslations } from "@src/common/lib/functions/extractTranslations";
    import useTranslation from "next-translate/useTranslation";

{{/if}}
{{/if}}


{{#if wantReactComponent}}
{{#if wantMemo}}
export const {{ properCase ComponentName }} = memo((props) => {
{{else}}
export function {{ properCase ComponentName }}(props) {
{{/if}}
  {{#if wantTranslations}}
    const { t } = useTranslation('common');
    const tr = loadTranslations(common, t);
  {{/if}}

  return (
  {{#if wantStyledComponents}}
  <Styled{{ properCase ComponentName }}>
  {{ properCase ComponentName }} component
  {{else}}
  <div className="flex flex-col">
  {{/if}}
    {{#if wantTranslations}}
    {tr.something}

    {{/if}}
  {{#if wantStyledComponents}}
  </Styled{{ properCase ComponentName }}>
  {{else}}

      <div >
          <span className={s.start}>Dianna </span>

      </div>


  </div>
  {{/if}}
  );

{{#if wantMemo}}
});
{{else}}
};
{{/if}}
{{/if}}

{{#if wantStyledComponents}}
  export const Styled{{ properCase ComponentName }} = styled.button(({ isPrimary, isSecondary, isSmall }) => [

  tw`transform transition-transform duration-75`,
  tw`focus:(scale-105 text-yellow-400)`,

  isPrimary && tw`bg-black text-white border-black`,

  isSecondary && [
  css`
  box-shadow: 0 0.1em 0 0 rgba(0, 0, 0, 0.25);
  `,
  tw`border-2 border-yellow-600`,
  ],

  isSmall ? tw`text-sm` : tw`text-lg`,

  css`
  color: ${theme`colors.mine`};
  `,
  ]);

{{/if}}
