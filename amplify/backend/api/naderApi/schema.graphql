type Post @model
@key(name: "postsByUsername", fields: ["username"], queryField: "postsByUsername")
@auth(rules: [
  { allow: owner, ownerField: "username" },
  { allow: public, operations: [read] }
]) {
  id: ID!
  title: String!
  content: String!
  username: String
  comments: [Comment]
}

type Query {
  getMessage (postId: ID): Post @function(name: "naderfunction-${env}")
  sellerData : AWSJSON @function(name: "sellerAppFunction-${env}")
}


type TimelineItem @model @auth(rules: [{allow: private}]) {
  id: ID!
  description: String
  postTime: AWSDateTime
  author: User @connection
  content: Content @connection
  comments: [Comment] @connection(keyName: "byTimelineItem", fields: ["id"])
}

type Comment @model @key(name: "byTimelineItem", fields: ["timelineitemID"]) @auth(rules: [{allow: private}]) {
  id: ID!
  body: String
  timelineitemID: ID
  author: User @connection
}

enum ContentType {
  IMAGE
  VIDEO
}

type Content @model @auth(rules: [{allow: private}]) {
  id: ID!
  source: String
  type: ContentType
}

type User @model @auth(rules: [{allow: private}]) {
  id: ID!
  username: String
  profilepic: String
  email: String
}
